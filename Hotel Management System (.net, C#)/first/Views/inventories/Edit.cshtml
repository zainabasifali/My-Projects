@model first.Models.inventory

@{
    string userRole = null;
    string guestName = null;

    if (Session["UserRole"] != null && Session["username"] != null)
    {
        userRole = Session["UserRole"].ToString();
        guestName = Session["Username"].ToString();
    }

    ViewBag.Title = "Edit Inventory";
    if (userRole != null && userRole == "Admin")
    {
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_StaffLayout.cshtml";
    }
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Edit Inventory</h2>
        <div>
            @if (userRole == "Admin")
            {
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary rounded" })

            }
            else
            {
                @Html.ActionLink("Back to List", "StaffIndex", null, new { @class = "btn btn-secondary rounded" })

            }
        </div>
    </div>

    @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.id)

        <hr class="mb-4" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="mb-3 row">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "col-md-2 col-form-label fw-semibold" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control rounded" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3 row">
            @Html.LabelFor(model => model.category, htmlAttributes: new { @class = "col-md-2 col-form-label fw-semibold" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.category, new { htmlAttributes = new { @class = "form-control rounded" } })
                @Html.ValidationMessageFor(model => model.category, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3 row">
            @Html.LabelFor(model => model.quantity, htmlAttributes: new { @class = "col-md-2 col-form-label fw-semibold" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control rounded" } })
                @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3 row">
            <div class="offset-md-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary rounded" />
            </div>
        </div>
    }
</div>
